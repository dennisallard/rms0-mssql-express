(2023-04-05
Implemented crimes/ endpoint with url args location, daterange, get

Able to test via curl using python to avoid having to urlencode the  url:

allar@DESKTOP-HV3LP4O MINGW64 ~
$ which pip3
/c/Users/allar/AppData/Local/Programs/Python/Python310/Scripts/pip3

allar@DESKTOP-HV3LP4O MINGW64 ~
$ pip3 install requests
Collecting requests
  Downloading requests-2.28.2-py3-none-any.whl (62 kB)
     ---------------------------------------- 62.8/62.8 kB 3.5 MB/s eta 0:00:00
Collecting idna<4,>=2.5
  Downloading idna-3.4-py3-none-any.whl (61 kB)
     ---------------------------------------- 61.5/61.5 kB ? eta 0:00:00
Collecting charset-normalizer<4,>=2
  Downloading charset_normalizer-3.1.0-cp310-cp310-win_amd64.whl (97 kB)
     ---------------------------------------- 97.1/97.1 kB 5.4 MB/s eta 0:00:00
Collecting certifi>=2017.4.17
  Downloading certifi-2022.12.7-py3-none-any.whl (155 kB)
     -------------------------------------- 155.3/155.3 kB 9.7 MB/s eta 0:00:00
Collecting urllib3<1.27,>=1.21.1
  Downloading urllib3-1.26.15-py2.py3-none-any.whl (140 kB)
     ---------------------------------------- 140.9/140.9 kB ? eta 0:00:00
Installing collected packages: urllib3, idna, charset-normalizer, certifi, requests
Successfully installed certifi-2022.12.7 charset-normalizer-3.1.0 idna-3.4 requests-2.28.2 urllib3-1.26.15

allar@DESKTOP-HV3LP4O MINGW64 ~
$

allar@DESKTOP-HV3LP4O MINGW64 ~
$ winpty python
Python 3.10.11 (tags/v3.10.11:7d4cc5a, Apr  5 2023, 00:38:17) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import requests
>>> r = requests.get('http://localhost:3002/api/crimes/?location=PACIFIC COAST&geo=33.7905&geo=-118.2750&geo=0.5&daterange=2020-02-03&daterange=2020-02-06')
>>> r.json()
{'crimes': [{'DR_NO': '1970-01-01T20:05:05.365Z', 'Date_Rptd': '2020-02-03T00:00:00.000Z', 'LOCATION': '1000 W  PACIFIC COAST                HY', 'LAT': 33.79050064086914, 'LON'
: -118.2750015258789}, {'DR_NO': '1970-01-01T20:05:05.501Z', 'Date_Rptd': '2020-02-06T00:00:00.000Z', 'LOCATION': 'PACIFIC COAST                HY', 'LAT': 33.79050064086914, 'L
ON': -118.2750015258789}], 'count': 2}
>>>

)

(2023=04-04
Implemented streaming on the dboTutorials dobCustomers table.

function getCustomersStream(req, res) returned:
[{"CustomerId":1,"Name":"Orlando","Location":"Australia","Email":""},{"CustomerId":2,"Name":"Keith","Location":"India","Email":"keith0@adventure-works.com"},{"CustomerId":3,"Name":"Donna","Location":"Germany","Email":"donna0@adventure-works.com"},{"CustomerId":4,"Name":"Janet","Location":"United States","Email":"janet1@adventure-works.com"},{"CustomerId":5,"Name":"Dennis","Location":"United States","Email":"allard@oceanpark.com"},{"CustomerId":6,"Name":"Tony","Location":"Norwalk","Email":"tony@oceanpark.com"},{"CustomerId":7,"Name":"Eric","Location":"Acton","Email":"eric.allard@allfx.com"},{"CustomerId":8,"Name":"Irina","Location":"Brentwood","Email":"grandopen0@gmail.com"}]

The consol log for this run was:

allar@DESKTOP-HV3LP4O MINGW64 ~/OneDrive/Documents/data/lapd/projects/rms0-mssql-express
$ npm run start

> mssql-node-express@1.0.0 start
> nodemon api.js

[nodemon] 2.0.22
[nodemon] to restart at any time, enter `rs`
[nodemon] watching path(s): *.*
[nodemon] watching extensions: js,mjs,json
[nodemon] starting `node api.js`
DEBUG: [API_PORT, API_HOST, API_HOST_URL, SQL_USER, SQL_PASSWORD, SQL_DATABASE, SQL_SERVER, SQL_PORT] = 
["3002","localhost","http://localhost:3002","sa","RMS0foobar","TutorialDB","127.0.0.1","1433"]
DEBUG: config = {"apiport":3002,"host":"localhost","url":"http://localhost:3002","user":"sa","password":"RMS0foobar","server":"127.0.0.1","database":"TutorialDB","options":{"port":1433,"trustedconnection":true,"enableArithAbort":true,"encrypt":false}}
Customer Express API is listening on port 3002
GO GO c=================================================
middleware executes here, e.g. to authenticate via JWT
DEBUG: recordset columns = {
    "CustomerId": {
        "index": 0,
        "name": "CustomerId",
        "nullable": false,
        "caseSensitive": false,
        "identity": false,
        "readOnly": false
    },
    "Name": {
        "index": 1,
        "name": "Name",
        "length": 100,
        "nullable": false,
        "caseSensitive": false,
        "identity": false,
        "readOnly": false
    },
    "Location": {
        "index": 2,
        "name": "Location",
        "length": 100,
        "nullable": false,
        "caseSensitive": false,
        "identity": false,
        "readOnly": false
    },
    "Email": {
        "index": 3,
        "name": "Email",
        "length": 100,
        "nullable": false,
        "caseSensitive": false,
        "identity": false,
        "readOnly": false
    }
}
DEBUG: row = {
    "CustomerId": 1,
    "Name": "Orlando",
    "Location": "Australia",
    "Email": ""
}
flushing at rowCounter = 0
DEBUG: row = {
    "CustomerId": 2,
    "Name": "Keith",
    "Location": "India",
    "Email": "keith0@adventure-works.com"
}
DEBUG: row = {
    "CustomerId": 3,
    "Name": "Donna",
    "Location": "Germany",
    "Email": "donna0@adventure-works.com"
}
DEBUG: row = {
    "CustomerId": 4,
    "Name": "Janet",
    "Location": "United States",
    "Email": "janet1@adventure-works.com"
}
flushing at rowCounter = 3
DEBUG: row = {
    "CustomerId": 5,
    "Name": "Dennis",
    "Location": "United States",
    "Email": "allard@oceanpark.com"
}
DEBUG: row = {
    "CustomerId": 6,
    "Name": "Tony",
    "Location": "Norwalk",
    "Email": "tony@oceanpark.com"
}
DEBUG: row = {
    "CustomerId": 7,
    "Name": "Eric",
    "Location": "Acton",
    "Email": "eric.allard@allfx.com"
}
flushing at rowCounter = 6
DEBUG: row = {
    "CustomerId": 8,
    "Name": "Irina",
    "Location": "Brentwood",
    "Email": "grandopen0@gmail.com"
}
DEBUG: done returnValue = {
    "output": {},
    "rowsAffected": [
        8
    ]
}
)

